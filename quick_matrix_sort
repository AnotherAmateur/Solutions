#include<fstream>
#include<iomanip>

using namespace std;

bool Less(double a, double b)
{
    return a < b;
}

bool Greater(double a, double b)
{
    return a > b;
}

void quicksort(double** mas, int size, int column, bool cmp(double a, double b))
{

    int left = 0;
    int right = size - 1;

    int mid = mas[size / 2][column];

    do {
        while (cmp(mas[left][column], mid)) {
            ++left;
        }

        while (cmp(mid, mas[right][column])) {
            --right;
        }

        if (left <= right) {
            swap(mas[left][column], mas[right][column]);
            ++left;
            --right;
        }
    } while (left < right);

    if (right > 0)
        quicksort(mas, right + 1, column, cmp);
    

    if (left < size)
        quicksort(&mas[left], size - left, column, cmp);
    
}

void Sort(double** matrix, int size)
{
    for (int column = 0; column < size; ++column)
        if (column % 2)
            quicksort(matrix, size, column, Greater);
        else
            quicksort(matrix, size, column, Less);

}

int main()
{
    ifstream in("input.txt");

    int size;
    in >> size;
    double** matrix = new double* [size];
    for (int i = 0; i < size; ++i)
        matrix[i] = new double[size];

    for (int i = 0; i < size; ++i)
        for (int j = 0; j < size; ++j)
            in >> matrix[i][j];
    in.close();

    Sort(matrix, size);

    ofstream out("output.txt");

    for (int i = 0; i < size; ++i)
        out << setw(5) << i  ;
    out << endl;

    for (int i = 0; i < size; ++i) { 
        
        for (int j = 0; j < size; ++j)
            out << setw(4) << fixed <<  setprecision(0) << matrix[i][j] << ' ';

        out << endl;
    }

    out.close();

    for (int i = 0; i < size; ++i)
    delete[]matrix[i];
    delete[]matrix;
}
